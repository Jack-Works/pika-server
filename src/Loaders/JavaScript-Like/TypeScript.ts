import { Loader } from '..'
import { importGlobal } from '../../utils/import'
import { TransformationContext, SourceFile, Node, StringLiteral } from 'typescript'
import { nodeStyleResolution } from './NodeStyleResolution'
import { isScriptLikeTarget } from '../../types'

export default {
    // Yes but sad.
    canHandle: 'video/mp2t',
    transformESModule: async (source, ctx) => {
        try {
            const ts = await importGlobal<typeof import('typescript')>('typescript')
            const result = ts.transpileModule(source, {
                compilerOptions: {
                    jsx: ts.JsxEmit.React,
                    module: ts.ModuleKind.ESNext,
                    target: ts.ScriptTarget.ES2018,
                    sourceMap: true,
                    inlineSources: true,
                    inlineSourceMap: true,
                },
                fileName: ctx.originalUrl,
                transformers: {
                    after: [transformPath(ts, ctx.serveBasePath)],
                },
            })
            return result.outputText
        } catch (e) {
            return `
throw new TypeError('To import TypeScript directly, you should install a TypeScript compiler in the global scope.')
export default undefined`
        }
    },
    redirectHandler(type, path) {
        if (!isScriptLikeTarget(type)) return []
        return [path + '.tsx', path + '.ts', path + '/index.tsx', path + '/index.ts']
    },
} as Loader

function transformPath(ts: typeof import('typescript'), basePath: string) {
    return (ctx: TransformationContext) => {
        return (sourceFile: SourceFile) => {
            function visitor(node: Node): Node {
                if (ts.isImportDeclaration(node)) {
                    // transform `import ... from '...'
                    const newPath = nodeStyleResolution((node.moduleSpecifier as StringLiteral).text, basePath)
                    return ts.createImportDeclaration(
                        node.decorators,
                        node.modifiers,
                        node.importClause,
                        ts.createStringLiteral(newPath),
                    )
                } else if (ts.isExportDeclaration(node)) {
                    // transform `export ... from '...'`
                    if (!node.moduleSpecifier) return node
                    const newPath = nodeStyleResolution((node.moduleSpecifier as StringLiteral).text, basePath)
                    return ts.createExportDeclaration(
                        node.decorators,
                        node.modifiers,
                        node.exportClause,
                        ts.createStringLiteral(newPath),
                    )
                } else if (ts.isCallExpression(node)) {
                    // transform import(...)
                    if (ts.isToken(node.expression) && node.expression.kind === ts.SyntaxKind.ImportKeyword) {
                        return rewriteDynamicImport(node.arguments)
                    }
                }
                return ts.visitEachChild(node, visitor, ctx)
            }
            return ts.visitEachChild(sourceFile, visitor, ctx)
        }
    }

    /**
     * Generated by https://ts-ast-viewer.com/
     *
     * Code represents:
     * @example
     * ```ts
     * import(((path) => {
     *     if (path.startsWith('./') || path.startsWith('../') || path.startsWith('/')) return path
     * return `https://unpkg.com/${path}?module`
     * })(args))
     * ```
     * @param args
     */
    function rewriteDynamicImport(args: any) {
        return ts.createCall(ts.createToken(ts.SyntaxKind.ImportKeyword) as any, undefined, [
            ts.createCall(
                ts.createParen(
                    ts.createArrowFunction(
                        undefined,
                        undefined,
                        [
                            ts.createParameter(
                                undefined,
                                undefined,
                                undefined,
                                ts.createIdentifier('path'),
                                undefined,
                                undefined,
                                undefined,
                            ),
                        ],
                        undefined,
                        ts.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                        ts.createBlock(
                            [
                                ts.createIf(
                                    ts.createBinary(
                                        ts.createBinary(
                                            ts.createCall(
                                                ts.createPropertyAccess(
                                                    ts.createIdentifier('path'),
                                                    ts.createIdentifier('startsWith'),
                                                ),
                                                undefined,
                                                [ts.createStringLiteral('./')],
                                            ),
                                            ts.createToken(ts.SyntaxKind.BarBarToken),
                                            ts.createCall(
                                                ts.createPropertyAccess(
                                                    ts.createIdentifier('path'),
                                                    ts.createIdentifier('startsWith'),
                                                ),
                                                undefined,
                                                [ts.createStringLiteral('../')],
                                            ),
                                        ),
                                        ts.createToken(ts.SyntaxKind.BarBarToken),
                                        ts.createCall(
                                            ts.createPropertyAccess(
                                                ts.createIdentifier('path'),
                                                ts.createIdentifier('startsWith'),
                                            ),
                                            undefined,
                                            [ts.createStringLiteral('/')],
                                        ),
                                    ),
                                    ts.createReturn(ts.createIdentifier('path')),
                                    undefined,
                                ),
                                ts.createReturn(
                                    ts.createTemplateExpression(
                                        ts.createTemplateHead('/node_modules/', '/node_modules/'),
                                        [
                                            ts.createTemplateSpan(
                                                ts.createIdentifier('path'),
                                                ts.createTemplateTail('', ''),
                                            ),
                                        ],
                                    ),
                                ),
                            ],
                            true,
                        ),
                    ),
                ),
                undefined,
                args,
            ),
        ])
    }
}
